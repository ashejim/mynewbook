Traceback (most recent call last):
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Jim\anaconda3\envs\jupyter-book\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# from ipywidgets import interact, FloatSlider, interactive, fixed
# import matplotlib.patches as mpatches
# from bqplot import pyplot as plt
# from matplotlib.collections import PatchCollection

# import numpy as np
# from bqplot import pyplot as plt
# from IPython.display import display
# from ipywidgets import interactive, fixed, IntSlider, FloatSlider, HBox, Layout

# style="Simple,head_length=28,head_width=36,tail_width=20"
# arrow = arrow = mpatches.FancyArrowPatch((1,1), (3,3), arrowstyle=style)
# plt.gca().add_patch(arrow)

# plt.plot([1, 3], [1,3], "rx", markersize=15)
# plt.xlim(0, 6)
# plt.ylim(0, 6)
# plt.show()

from ipywidgets import interact, FloatSlider, interactive, fixed
import matplotlib.patches as mpatches
from matplotlib.collections import PatchCollection

#imports
import pandas as pd
from ipywidgets import interact, interactive, fixed, interact_manual, Layout, Box, VBox, HBox, Button, Output, Tab
# import ipywidgets as widgets
from IPython.display import display, display_html
import numpy as np
import math
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm
import markdown
from IPython.core.display import display, HTML
from myst_nb import glue

out = Output()

mu = 66.4
sigma = 3.84
sample_size = 50,
upper_cond= 66.4+4*3.84

#draws pdf of smampling means)
def update_plot(change):
    lower_cond = change['new'] # new slider value 
    mu = 66.4
    sigma = 3.84
    sample_size = 50.0,
    upper_cond= 66.4+4*3.84
    sigma_n = sigma/(np.sqrt(sample_size)[0]) #std dev of sampling means
    with out:
#         sigma_n = sigma #std dev of sampling means
        clear_output(wait=True)
        x = np.linspace(-4*sigma_n + mu, 4*sigma_n + mu, 1000) #x-axis values
        y = norm.pdf(x, mu, sigma_n) # (x-values, location, scale) #norm function
        #plot
        fig, axs = plt.subplots()
        plt.plot(x, y)
        plt.fill_between(x, y, 0, where = (x > lower_cond) & (x < upper_cond),color = 'pink')
        plt.axvline(x=66.4, color='red', dashes=(3, 3), zorder=0,linewidth=1)
        plt.axvline(x=lower_cond, color='blue', dashes=(3, 3), zorder=0,linewidth=1)
        plt.xlabel('Density')
        plt.ylabel('Height')
        plt.text(lower_cond+.1,.6, r'$\bar{}=${}'.format(r'x',round(lower_cond,2)), fontsize=12)
        prob = 1-norm.cdf(lower_cond, loc=mu, scale=sigma_n)
        plt.text(67.5,.3, r'prob.={}'.format(round(prob,3)), fontsize=12)
        ##arrows
        style="Simple,head_length=15,head_width=15,tail_width=3"
        arrow = arrow = mpatches.FancyArrowPatch((68,.275), ((lower_cond+68)/2,
                                                 norm.pdf((lower_cond+68.75)/2, mu, sigma_n)/2),
                                                 arrowstyle=style)
        plt.gca().add_patch(arrow)
    #     display(fig)
        plt.show()

 
# x1 = np.linspace(-4*sigma_n + mu, 4*sigma_n + mu, 1000) #x-axis values
# y1 = norm.pdf(x, mu, sigma_n) # (x-values, location, scale) #norm function
# plotnorm = plt.plot(x,y)
    
# def update_plot(x):
        

## Generate our user interface.
# slider = widgets.FloatSlider(description='Sample mean', 
#                                 style = style, 
#                                 min=64.5, max=68.5, 
#                                 step = 0.1, value=67)

style ={'description_width': 'initial'};
interact_layout = Layout(display='flex',
                    flex_flow='column',
                    align_items = 'center',
                    align_content = 'center',
                    border='solid'
                    )

# w = interactive(draw_pdf_smeans,
#          mu = fixed(66.4),
#          sigma = fixed(3.84),
#          sample_size = fixed(50),
#          upper_cond= fixed(66.4+4*3.84),
#          lower_cond=FloatSlider(description='Sample mean', 
#                                 style = style, 
#                                 min=64.5, max=68.5, 
#                                 step = .5, value=67
#                                 ),
#         );

slider_layout = Layout(
    justify_content = 'center',
    align_items = 'center',
    align_content = 'center',
)

slider = FloatSlider(description='Sample mean', 
                                border='solid',
                                style = style,
                                min=64.5, max=68.5, 
                                step = .5, value=67,
                                layout = slider_layout
                                )

# box_images = VBox(children = [w.children[0], w.children[1]],layout=box_layout)
# box_images
# display(w.children[0],justify_content = 'center')
# display(w.children[1],justify_content = 'center')
# display(w)
slider.observe(update_plot, 'value')
update_plot({'new': slider.value}) 
fig_and_slider = VBox([slider,out],layout=interact_layout)
d
# display(VBox([w.children[0], w.children[1]]))

# display(VBox([plt.current_figure(), w]))
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_810272\2526192705.py[0m in [0;36m<module>[1;34m[0m
[0;32m    132[0m [0mupdate_plot[0m[1;33m([0m[1;33m{[0m[1;34m'new'[0m[1;33m:[0m [0mslider[0m[1;33m.[0m[0mvalue[0m[1;33m}[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    133[0m [0mfig_and_slider[0m [1;33m=[0m [0mVBox[0m[1;33m([0m[1;33m[[0m[0mslider[0m[1;33m,[0m[0mout[0m[1;33m][0m[1;33m,[0m[0mlayout[0m[1;33m=[0m[0minteract_layout[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 134[1;33m [0md[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    135[0m [1;31m# display(VBox([w.children[0], w.children[1]]))[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m    136[0m [1;33m[0m[0m

[1;31mNameError[0m: name 'd' is not defined
NameError: name 'd' is not defined

